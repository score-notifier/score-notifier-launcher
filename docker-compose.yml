services:
  nats-server:
    networks:
      - app-network
    image: nats:2.10.0-alpine
    ports:
      - "4222:4222"

  redis-server:
    networks:
      - app-network
    image: redis:6.2
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]

  api-gateway:
    depends_on:
      - redis-server
    build: ./api-gateway
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    volumes:
      - ./api-gateway/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${API_GATEWAY_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL}

  ms-scraping:
    depends_on:
      - redis-server
    build: ./ms-scraping
    volumes:
      - ./ms-scraping/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${SCRAPING_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - PUPPETEER_EXECUTABLE_PATH=${PUPPETEER_EXECUTABLE_PATH}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  ms-users:
    depends_on:
      db-users:
        condition: service_healthy
    build: ./ms-users
    volumes:
      - ./ms-users/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${USERS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${USERS_DATABASE_URL}

  db-users:
    container_name: users_database
    image: mysql:8.4.1
    restart: always
    volumes:
      - users-mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=users_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD}" ]
      interval: 1s
      retries: 120
      timeout: 1s
      start_period: 30s

  ms-notifications:
    depends_on:
      db-notifications:
        condition: service_healthy
    build: ./ms-notifications
    volumes:
      - ./ms-notifications/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${NOTIFICATIONS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${NOTIFICATIONS_DATABASE_URL}

  db-notifications:
    container_name: notifications_database
    image: mysql:8.4.1
    restart: always
    volumes:
      - notifications-mysql-data:/var/lib/mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=notifications_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD}" ]
      interval: 1s
      retries: 120
      timeout: 1s
      start_period: 30s

  ms-competitions:
    depends_on:
      db-competitions:
        condition: service_healthy
    build: ./ms-competitions
    volumes:
      - ./ms-competitions/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${COMPETITIONS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${COMPETITIONS_DATABASE_URL}

  db-competitions:
    container_name: competitions_database
    image: mysql:8.4.1
    restart: always
    volumes:
      - competitions-mysql-data:/var/lib/mysql
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=competitions_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD}" ]
      interval: 1s
      retries: 120
      timeout: 1s
      start_period: 30s

  ms-stats:
    depends_on:
      db-stats:
        condition: service_healthy
    build: ./ms-stats
    volumes:
      - ./ms-stats/src:/usr/src/app/src
    command: npm run start:dev
    networks:
      - app-network
    environment:
      - PORT=${STATS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${STATS_DATABASE_URL}

  db-stats:
    container_name: stats_database
    image: mysql:8.4.1
    restart: always
    volumes:
      - stats-mysql-data:/var/lib/mysql
    ports:
      - "3309:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=stats_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD}" ]
      interval: 1s
      retries: 120
      timeout: 1s
      start_period: 30s

networks:
  app-network:

volumes:
  users-mysql-data:
  notifications-mysql-data:
  competitions-mysql-data:
  stats-mysql-data:
  redis-data:
    driver: local